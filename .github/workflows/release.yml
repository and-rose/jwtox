name: Release

on:
  push:
    tags:
      - '[0-9]*.[0-9]*.[0-9]*'

permissions:
  contents: write

jobs:
  build-and-upload:
    name: Build and upload
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: arm-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
          - os: ubuntu-latest
            target: aarch64-linux-android
          - os: macos-11
            target: x86_64-apple-darwin
          - os: macos-11
            target: aarch64-apple-darwin
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: aarch64-pc-windows-msvc

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: get_version
        uses: SebRollen/toml-action@v1.2.0
        with:
          file: Cargo.toml
          field: package.version

      # Check that git tag matches version. Quit if it doesn't. Be careful because windows and linux have different syntax
      - name: Check version (Linux)
        shell: bash
        if: ${{ runner.os == 'Linux' }}
        run: |
          if [ "${{ steps.get_version.outputs.value }}" != "${{ github.ref }}" ]; then
            echo "Tag does not match version in Cargo.toml"
            exit 1
          fi

      - name: Check version (Windows)
        shell: pwsh
        if: ${{ runner.os == 'Windows' }}
        run: |
          if (${{ steps.get_version.outputs.value }} -ne ${{ github.ref }}) {
            Write-Host "Tag does not match version in Cargo.toml"
            exit 1
          }

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        # Arguments to pass in
        with:
          # Make Rust compile to our target (defined in the matrix)
          targets: ${{ matrix.target }}

      - name: Setup cache
        uses: Swatinem/rust-cache@v2.7.3
        with:
          key: ${{ matrix.target }}

      - name: Install cross
        if: ${{ runner.os == 'Linux' }}
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: --color=always --git=https://github.com/cross-rs/cross.git --locked --rev=02bf930e0cb0c6f1beffece0788f3932ecb2c7eb --verbose cross
      
      - name: Build binary
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --locked --target=${{ matrix.target }} --color=always --verbose
          use-cross: ${{ runner.os == 'Linux' }}

      - name: Package (*nix)
        if: runner.os != 'Windows'
        run: |
          tar -cv -C target/${{ matrix.target }}/release/ jwtox |
          gzip --best > jwtox-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.tar.gz

      - name: Package (Windows)
        if: runner.os == 'Windows'
        run: |
          7z a jwtox-${{ steps.get_version.outputs.value }}-${{ matrix.target }}.zip `
            ./target/${{ matrix.target }}/release/jwtox.exe

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: |
            *.deb
            *.tar.gz
            *.zip
      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            *.deb
            *.tar.gz
            *.zip
          name: ${{ steps.get_version.outputs.value }}
